{"version":3,"sources":["assets/normal.mp3","assets/happy.mp3","assets/lamp.png","assets/light.png","context/score.context.ts","context/speech.context.tsx","PHRASES.ts","Buttons.tsx","Music.tsx","Speech.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ScoreContext","React","createContext","score","setScore","initialState","currentPhraseIndex","setNextPhrase","getQuestion","getAnswers","PHRASES","used","text","map","value","sort","Math","random","a","b","SpeechContext","SpeechContextProvider","setGameOver","children","useState","setCurrentPhraseIndex","Provider","length","question","answers","Buttons","useContext","className","onClick","answerScore","eSound","normal","require","default","happy","Music","gameStarted","useSound","loop","soundEnabled","volume","playNormal","stopNormal","stop","playHappy","stopHappy","currentSound","setCurrentSound","prevSoundRef","useRef","useEffect","sad","current","Speech","root","document","documentElement","getRandomBetween","min","max","changeColor","timeout","setTimeout","style","setProperty","blink","App","setGameStarted","showControls","setShowControls","src","light","lamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","href","rel","getElementById"],"mappings":"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","file":"static/js/main.27eb385b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"91186c71ad4e82001831e6aefacfc75f.mp3\";","export default __webpack_public_path__ + \"d2278987e445e6e84db2e19883660273.mp3\";","export default __webpack_public_path__ + \"static/media/lamp.1ab1e7bb.png\";","export default __webpack_public_path__ + \"static/media/light.e1e92035.png\";","import React from 'react'\n\nexport interface IContext {\n  score: number,\n  setScore: Function\n}\n\nexport const ScoreContext = React.createContext<IContext>({ score: 0, setScore: () => {} })\n","import React, { useState } from 'react'\nimport { FIRST_PHRASE, IAnswer, IState, REST_PHRASES } from '../PHRASES'\n\nexport interface ISpeechContext {\n  currentPhraseIndex: number\n  setNextPhrase: Function\n  getQuestion: () => string\n  getAnswers: () => IAnswer[]\n}\n\nconst initialState = {\n  currentPhraseIndex: 0,\n  setNextPhrase: () => {},\n  getQuestion: () => 'string',\n  getAnswers: () => []\n}\n\nconst shuffle = (arr: any[]) => {\n  return arr\n    .map((value) => ({ value, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ value }) => value)\n}\nconst PHRASES: IState[] = [FIRST_PHRASE, ...shuffle(REST_PHRASES)]\n\nexport const SpeechContext = React.createContext<ISpeechContext>(initialState)\n\nexport function SpeechContextProvider({ setGameOver, children }: { setGameOver: Function, children: any }) {\n  const setNextPhrase = () => {\n    PHRASES[currentPhraseIndex].used = true\n    if (currentPhraseIndex === PHRASES.length - 1) {\n      setCurrentPhraseIndex(0)\n      //setGameOver()\n    } else {\n      setCurrentPhraseIndex(currentPhraseIndex + 1)\n    }\n  }\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0)\n\n  return (\n    <SpeechContext.Provider value={\n      {\n        currentPhraseIndex, setNextPhrase,\n        getQuestion: () => {\n          return PHRASES[currentPhraseIndex]?.question || 'Game over'\n        },\n        getAnswers: () => {\n          return PHRASES[currentPhraseIndex]?.answers || []\n        }\n      }\n    }>\n      {children}\n    </SpeechContext.Provider>\n  )\n}\n","export interface IState {\n  question: string,\n  used: boolean,\n  answers: IAnswer[]\n}\nexport interface IAnswer { text: string, score: number }\nexport const FIRST_PHRASE: IState = {\n  'question': 'Hey...I\\'m Greg the Lamp',\n  used: false,\n  'answers': [\n    {\n      'text': 'Hi, Greg',\n      'score': 0\n    },\n    {\n      'text': 'I\\'m not interested',\n      'score': -2\n    },\n    {\n      'text': 'You look sad, Greg, wanna talk?',\n      'score': 3\n    },\n    {\n      'text': 'Wow, talking lamp, lol',\n      'score': -1\n    }\n  ]\n}\n\n\nexport const REST_PHRASES: IState[] = [\n  {\n    'question': 'I feel lonely',\n    used: false,\n    'answers': [\n      {\n        text: 'Hug',\n        'score': 2\n      },\n      {\n        'text': 'Ignore',\n        'score': -2\n      },\n      {\n        'text': 'Everyone\\'s lonely...',\n        'score': -1\n      },\n      {\n        'text': 'I\\'m lonely too',\n        'score': 1\n      }\n    ]\n  }\n]\n","import { useContext } from 'react'\nimport './Buttons.css'\nimport { ScoreContext } from './context/score.context'\nimport { SpeechContext } from './context/speech.context'\n\nexport function Buttons() {\n  const { score, setScore } = useContext(ScoreContext)\n  const { getAnswers, setNextPhrase } = useContext(SpeechContext)\n\n  const clicked = (answerScore: number) => {\n    setScore(score + answerScore)\n    setNextPhrase()\n\n  }\n  return (\n    <div className=\"Buttons\">\n      <div className=\"score\">Score: {score}</div>\n      {\n        getAnswers()\n          .map(\n            a => <div className=\"btn btn--stripe\" key={a.text}\n                      onClick={() => clicked(a.score)}>{a.text}</div>)\n      }\n    </div>\n  )\n}\n\n","import { useContext, useEffect, useRef, useState } from 'react'\nimport useSound from 'use-sound'\nimport './App.css'\nimport { ScoreContext } from './context/score.context'\n\nconst normal = require('./assets/normal.mp3').default\nconst happy = require('./assets/happy.mp3').default\n\nenum eSound {\n  happy = 'happy', normal = 'normal', sad = 'sad'\n}\n\nexport function Music({ gameStarted }: { gameStarted: boolean }) {\n  const { score } = useContext(ScoreContext)\n\n  const [playNormal, { stop: stopNormal }] = useSound(normal, { loop: true, soundEnabled: true, volume: .4 })\n  const [playHappy, { stop: stopHappy }] = useSound(happy, { loop: true, soundEnabled: true, volume: .4 })\n  const [currentSound, setCurrentSound] = useState<eSound | null>(null)\n\n  const prevSoundRef = useRef<eSound | null>()\n\n  useEffect(() => {\n    if (!gameStarted) {\n      return\n    }\n\n    if (score > 3) {\n      setCurrentSound(eSound.happy)\n      return\n    }\n    if (score > 2) {\n      setCurrentSound(eSound.normal)\n\n      return\n    }\n    if (score > -1) {\n      setCurrentSound(eSound.normal)\n      return\n    }\n    if (score > -3) {\n      setCurrentSound(eSound.sad)\n\n    }\n  }, [score, gameStarted])\n\n  useEffect(() => {\n    if (!currentSound || (prevSoundRef.current !== null && prevSoundRef.current === currentSound)) {\n      return\n    }\n    switch (prevSoundRef.current) {\n      case eSound.normal:\n        stopNormal()\n        break\n      case eSound.sad:\n        break\n      case eSound.happy:\n        stopHappy()\n        break\n    }\n\n    switch (currentSound) {\n      case eSound.normal:\n        playNormal()\n        break\n      case eSound.sad:\n        break\n      case eSound.happy:\n        playHappy()\n        break\n    }\n\n  }, [currentSound, stopNormal, stopHappy, playHappy, playNormal])\n\n  useEffect(() => {\n    prevSoundRef.current = currentSound\n  }, [currentSound])\n\n  return (\n    <>\n\n    </>\n  )\n}\n\n","import { useContext } from 'react'\nimport { ScoreContext } from './context/score.context'\nimport './Speech.css'\nimport { SpeechContext } from './context/speech.context'\n\nexport function Speech() {\n  const { score, setScore } = useContext(ScoreContext)\n  const { getQuestion } = useContext(SpeechContext)\n\n  return (\n\n    <div className=\"speech-container\">\n      <div className=\"speech\">\n        {getQuestion()}\n      </div>\n    </div>\n  )\n}\n\n","import { useEffect, useState } from 'react'\nimport './App.css'\nimport lamp from './assets/lamp.png'\nimport light from './assets/light.png'\nimport { Buttons } from './Buttons'\nimport { ScoreContext } from './context/score.context'\nimport { SpeechContextProvider } from './context/speech.context'\nimport { Music } from './Music'\nimport { Speech } from './Speech'\n\nconst root = document.documentElement\n\nfunction getRandomBetween(min: number, max: number) {\n  return Math.random() * (max - min) + min\n}\n\nfunction changeColor(timeout: number) {\n  setTimeout(() => {\n    root.style.setProperty('--brightness', getRandomBetween(70, 120) + '%')\n    root.style.setProperty('--hue', getRandomBetween(0, 180) + 'deg')\n    root.style.setProperty('--saturate', getRandomBetween(70, 120) + '%')\n    changeColor(getRandomBetween(1000, 10000))\n  }, timeout)\n}\n\nfunction blink() {\n  root.style.setProperty('--opacity', '0%')\n  setTimeout(() => {\n    root.style.setProperty('--opacity', '100%')\n    setTimeout(() => {\n      blink()\n    }, getRandomBetween(1000, 10000))\n  }, getRandomBetween(100, 200))\n}\n\nfunction App() {\n  changeColor(0)\n  blink()\n\n  const [gameStarted, setGameStarted] = useState(false)\n  const [showControls, setShowControls] = useState(false)\n  const [score, setScore] = useState(0)\n\n  useEffect(() => {\n    if (gameStarted) {\n      setShowControls(true)\n    }\n  }, [gameStarted])\n\n  const setGameOver = () => {\n\n  }\n\n  return (\n    <>\n\n      <SpeechContextProvider setGameOver={setGameOver}>\n        <ScoreContext.Provider value={{ score, setScore }}>\n          <Music gameStarted={gameStarted}/>\n          <div className=\"Game\">\n            <img className=\"img light\" src={light}/>\n            <img className=\"img lamp\" src={lamp}/>\n            {showControls && <Speech/>}\n            {!gameStarted && <button className=\"btn--stripe start-btn btn\" onClick={() => {\n              setGameStarted(true)\n            }}>Play</button>}\n          </div>\n          {showControls && <Buttons/>}\n\n\n        </ScoreContext.Provider>\n      </SpeechContextProvider>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"https://fonts.googleapis.com/css?family=Baloo+2:400,800\" rel=\"stylesheet\"/>\n    <div className=\"light bg\"/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//document.getElementById('root').classList.add('light');\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}